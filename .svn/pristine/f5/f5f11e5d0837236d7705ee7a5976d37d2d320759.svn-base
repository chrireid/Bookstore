package g4w14.BookStore.actionbeans;

import g4w14.BookStore.beans.OrderDetailsBean;
import g4w14.BookStore.util.LoadProperties;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Chris
 * 
 */
public class OrderDetailsActionBean {

	private final Logger log = LoggerFactory.getLogger(this.getClass()
			.getName());
	private String url, user, password;
	
	// See the context.xml for the datasource
//	@Resource(name = "jdbc/genres")
//	private DataSource ds;

	public OrderDetailsActionBean() {
		super();
//		try {
//			Context ctx = new InitialContext();
//			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/genres");
//		} catch (NamingException e) {
//			e.printStackTrace();
//		}
		
		// JUnit testing stylez
		try {
			String[] values = LoadProperties.loadProperties();
			url = values[0];
			user = values[1];
			password = values[2];
		} catch (IOException e) {
			log.debug("ioexception in orderdetailsactionbean");
		}
		
		
	}
	
	
	/**
	 * Inserts the OrderDetailsBean into the order_details table
	 * @param odb
	 * @return
	 * @throws SQLException
	 */
	public int insert(OrderDetailsBean odb) throws SQLException {
		
		int records;
		
		if (odb == null) {
			return 0;
		}
		
		// Using Java 1.7 try with resources to create JDBC Connection
		try (Connection connection = DriverManager.getConnection(url, user, password); //ds.getConnection();
				PreparedStatement orderDetailsPS = connection.prepareStatement(
						"INSERT INTO order_details_test(order_id, book_id, quantity, price) VALUES (?,?,?,?)")) {

			orderDetailsPS.setLong(1, odb.getOrderId());
			orderDetailsPS.setLong(2, odb.getBook().getId());
			orderDetailsPS.setInt(3, odb.getQuantity());
			orderDetailsPS.setBigDecimal(4, odb.getPrice());

			records = orderDetailsPS.executeUpdate();
			
		}  catch (SQLException sqlex) {
			// Log the exception
			log.error("Connection failed", sqlex);
			// Re-throw the exception
			throw sqlex;
		}
		
		return records;
	}
	
	/**
	 * Returns all OrderDetailsBeans that have the provided order_id
	 * @param orderId
	 * @return
	 * @throws SQLException
	 * @throws IOException 
	 * @throws NullPointerException 
	 */
	public ArrayList<OrderDetailsBean> searchByOrderId(long orderId) throws SQLException, NullPointerException, IOException {
		
		ArrayList<OrderDetailsBean> orderDetails = new ArrayList<OrderDetailsBean>();
		
		// If orderId is not greater than 1, invalid id, return 0
		if (orderId < 1) {
			return orderDetails;
		}
		
		// Using Java 1.7 try with resources to create JDBC Connection
		try (Connection connection = DriverManager.getConnection(url, user, password); //ds.getConnection();
				PreparedStatement orderDetailsPS = connection.prepareStatement(
						"SELECT * FROM order_details WHERE order_id = ?")) {
			
			orderDetailsPS.setLong(1, orderId);
			
			try (ResultSet orderDetailsRS = orderDetailsPS.executeQuery()) {
				
				while(orderDetailsRS.next()) {
					
					OrderDetailsBean odb = new OrderDetailsBean();
					odb.setId(orderDetailsRS.getLong("_id"));
					odb.setOrderId(orderDetailsRS.getLong("order_id"));
					odb.setQuantity(orderDetailsRS.getInt("quantity"));
					odb.setPrice(orderDetailsRS.getBigDecimal("price"));
					
					long book_id = orderDetailsRS.getLong("book_id");
					BookActionBean bab = new BookActionBean();
					odb.setBook(bab.getBookById(String.valueOf(book_id)));
					
					orderDetails.add(odb);
				}
			}
			
		} catch (SQLException sqlex) {
			// Log the exception
			log.error("Connection failed", sqlex);
			// Re-throw the exception
			throw sqlex;
		}
		
		return orderDetails;
	}
	
}

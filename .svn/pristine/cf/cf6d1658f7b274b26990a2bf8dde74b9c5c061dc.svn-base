package g4w14.BookStore.reports;

import g4w14.BookStore.actionbeans.InvoiceActionBean;
import g4w14.BookStore.actionbeans.OrdersActionBean;
import g4w14.BookStore.beans.BookBean;
import g4w14.BookStore.beans.InvoiceBean;
import g4w14.BookStore.beans.OrderDetailsBean;
import g4w14.BookStore.beans.OrdersBean;

import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.enterprise.context.RequestScoped;
import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The action bean for the TotalSalesReportBean
 * 
 * @author Chris
 */
@Named("totalSalesReportAction")
@RequestScoped
public class TotalSalesReportActionBean implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3372245079052001579L;

	private final Logger log = LoggerFactory.getLogger(this.getClass()
			.getName());

	public TotalSalesReportActionBean() {
		super();

		log.debug("TotalSalesReportActionBean instantiated");
	}

	/**
	 * Returns a TotalSalesReportBean object containing the total sales for all
	 * items
	 * 
	 * @return the TotalSalesReportBean object
	 * @throws IOException
	 * @throws NullPointerException
	 * @throws SQLException
	 */
	public TotalSalesReportBean getTotalSales() throws NullPointerException,
			IOException, SQLException {

		TotalSalesReportBean report = new TotalSalesReportBean();

		// Find all invoices
		InvoiceActionBean iab = new InvoiceActionBean();
		ArrayList<InvoiceBean> invoices = iab.getAllInvoices();

		if (invoices.size() > 0) {

			// Get orders from returned invoices
			ArrayList<OrdersBean> orders = getOrdersFromInvoices(invoices);

			// Create Sales Report from the array list of orders
			report = getTotalSalesReportFromOrders(orders);

		} else {

			// No invoices found within the dates
			report.setTotalNumSales(0);
			report.setTotalCost(new BigDecimal("0"));
			report.setTotalProfit(new BigDecimal("0"));
			report.setOrders(new ArrayList<OrdersBean>());

		}

		return report;
	}

	/**
	 * Returns a TotalSalesReportBean object containing the total sales for all
	 * items within the given date range, ordered by date
	 * 
	 * @param start
	 * @param end
	 * @return the TotalSalesReportBean object
	 * @throws IOException
	 * @throws NullPointerException
	 */
	public TotalSalesReportBean getTotalSales(Timestamp start, Timestamp end)
			throws SQLException, NullPointerException, IOException {

		// Instantiate the TotalSalesReportBean object
		TotalSalesReportBean report = new TotalSalesReportBean();

		// Find invoices between these dates
		InvoiceActionBean iab = new InvoiceActionBean();
		ArrayList<InvoiceBean> invoices = iab.getInvoicesByDate(start, end);

		if (invoices.size() > 0) {

			// Get orders from returned invoices
			ArrayList<OrdersBean> orders = getOrdersFromInvoices(invoices);

			// Create Sales Report from the array list of orders
			report = getTotalSalesReportFromOrders(orders);

		} else {

			// No invoices found within the dates
			report.setTotalNumSales(0);
			report.setTotalCost(new BigDecimal("0"));
			report.setTotalProfit(new BigDecimal("0"));
			report.setOrders(new ArrayList<OrdersBean>());
		}

		return report;
	}

	private ArrayList<OrdersBean> getOrdersFromInvoices(
			ArrayList<InvoiceBean> invoices) throws SQLException,
			NullPointerException, IOException {

		ArrayList<OrdersBean> orders = new ArrayList<OrdersBean>();

		// Find the Orders associated with the invoices
		for (InvoiceBean ib : invoices) {

			// Search for order based on id from invoice
			OrdersActionBean oab = new OrdersActionBean();
			OrdersBean ob = new OrdersBean();
			ob = oab.searchByOrderId(ib.getId());

			orders.add(ob);
		}

		return orders;

	}

	private TotalSalesReportBean getTotalSalesReportFromOrders(
			ArrayList<OrdersBean> orders) throws SQLException,
			NullPointerException, IOException {

		TotalSalesReportBean report = new TotalSalesReportBean();

		int totalNumSales = 0;
		BigDecimal totalCost = BigDecimal.ZERO;
		BigDecimal totalProfit = BigDecimal.ZERO;

		// Go through each order
		for (OrdersBean ob : orders) {

			// Go through each order details for each order
			for (OrderDetailsBean odb : ob.getOrderDetails()) {

				BookBean bb = odb.getBook();

				// Calculate the cost and profits of the order details line
				BigDecimal costOfLine = bb.getWholesale_price().multiply(
						new BigDecimal(odb.getQuantity()));
				BigDecimal profitOfLine = odb.getPrice()
						.multiply(new BigDecimal(odb.getQuantity()))
						.subtract(costOfLine);

				// Add cost/profit to report
				totalCost = totalCost.add(costOfLine);
				totalProfit = totalProfit.add(profitOfLine);

				// Not sure if total sales is based on quantity of books or
				// number of orders **** ASK
				totalNumSales += odb.getQuantity();
			}
		}

		// Set the report variables
		report.setTotalNumSales(totalNumSales);
		report.setTotalCost(totalCost);
		report.setTotalProfit(totalProfit);
		report.setOrders(orders);

		return report;

	}
}

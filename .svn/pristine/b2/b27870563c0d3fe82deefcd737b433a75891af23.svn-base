package g4w14.BookStore.reports;

import g4w14.BookStore.actionbeans.AuthorsBooksActionBean;
import g4w14.BookStore.actionbeans.InvoiceActionBean;
import g4w14.BookStore.actionbeans.OrderDetailsActionBean;
import g4w14.BookStore.actionbeans.OrdersActionBean;
import g4w14.BookStore.beans.AuthorBean;
import g4w14.BookStore.beans.BookBean;
import g4w14.BookStore.beans.InvoiceBean;
import g4w14.BookStore.beans.OrderDetailsBean;
import g4w14.BookStore.beans.OrdersBean;

import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.enterprise.context.RequestScoped;
import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The action bean for the SalesByAuthorReportBean
 * 
 * @author Chris
 */
@Named("salesByAuthorReportAction")
@RequestScoped
public class SalesByAuthorReportActionBean implements Serializable {
	

	private final Logger log = LoggerFactory.getLogger(this.getClass()
			.getName());
	
	public SalesByAuthorReportActionBean() {
		super();
		log.debug("SalesByAuthorReportActionBean instantiated");
	}
	
	
//	public SalesByAuthorReportBean getSalesByAuthor(long authorId) throws SQLException {
//		
//		// Instantiate the SalesByAuthorReportBean object
//		SalesByAuthorReportBean report = new SalesByAuthorReportBean();
//		
//		// Find all books by the author
//		try {
//			AuthorsBooksActionBean abab = new AuthorsBooksActionBean();
//			AuthorBean ab = new AuthorBean();
//			ab.setId(authorId);
//			ArrayList<BookBean> booksFromAuthor = abab.searchByAuthor(ab);
//			
//			// Now that we have all the books by the author, find all invoices with this book
//			// To find invoices, we need to find the orders that have been invoiced
//			ArrayList<OrderDetailsBean> orderDetails = new ArrayList<>();
//			OrderDetailsActionBean odab =  new OrderDetailsActionBean();
//			
//			// Retrieve the order details to find the order_id for invoice tracking
//			for(BookBean bb : booksFromAuthor) {
//				orderDetails.add(odab.searchByBookId(bb.getId()));
//			}
//			
//			ArrayList<InvoiceBean> invoices = new ArrayList<InvoiceBean>();
//			
//			// Retrieve the invoices from the order_ids obtained
//			for (OrderDetailsBean odb : orderDetails) {
//				InvoiceActionBean iab = new InvoiceActionBean();
//				InvoiceBean ib = iab.getInvoiceByOrderId(odb.getOrderId());
//				if (ib.getId() == -1) {
//					// Invoice for this order_id does not exist
//				} else {
//					invoices.add(ib);
//				}
//			}
//			
//			// If the sizes differ, not ever order has an invoice, have to dig those out
//			if (orderDetails.size() != invoices.size()) {
//				
//				orderDetails = new ArrayList<OrderDetailsBean>();
//				
//				// Go through the invoices...
//				for (InvoiceBean ib : invoices) {
//					
//					// To find the orders...
//					OrdersActionBean oab = new OrdersActionBean();
//					OrdersBean ob = oab.searchByOrderId(ib.getOrderId());
//					
//					odab = new OrderDetailsActionBean();
//					ArrayList<OrderDetailsBean> currentOrderDetails = odab.searchByOrderId(ob.getId());
//					
//					// That have order_details containing any of the books from the author
//					for (OrderDetailsBean odb : currentOrderDetails) {
//						for (BookBean bb : booksFromAuthor) {
//							
//							// If the order_details contains the book...
//							if (odb.getBook().getId() == bb.getId()) {
//								// Add it to the orderDetails array list
//								orderDetails.add(odb);
//							}
//						}
//					}
//				}
//			}
//			
//			report.set
//			
//			
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		
//	}
	
	private ArrayList<OrdersBean> getOrdersFromInvoices(
			ArrayList<InvoiceBean> invoices) throws SQLException,
			NullPointerException, IOException {

		ArrayList<OrdersBean> orders = new ArrayList<OrdersBean>();

		// Find the Orders associated with the invoices
		for (InvoiceBean ib : invoices) {

			// Search for order based on id from invoice
			OrdersActionBean oab = new OrdersActionBean();
			OrdersBean ob = new OrdersBean();
			ob = oab.searchByOrderId(ib.getId());

			orders.add(ob);
		}

		return orders;

	}

	private SalesByAuthorReportBean getSalesByAuthorReportFromOrders(
			ArrayList<OrdersBean> orders) throws SQLException,
			NullPointerException, IOException {

		SalesByAuthorReportBean report = new SalesByAuthorReportBean();

		int totalNumSales = 0;
		BigDecimal totalCost = BigDecimal.ZERO;
		BigDecimal totalProfit = BigDecimal.ZERO;

		// Go through each order
		for (OrdersBean ob : orders) {

			// Go through each order details for each order
			for (OrderDetailsBean odb : ob.getOrderDetails()) {

				BookBean bb = odb.getBook();

				// Calculate the cost and profits of the order details line
				BigDecimal costOfLine = bb.getWholesale_price().multiply(
						new BigDecimal(odb.getQuantity()));
				BigDecimal profitOfLine = odb.getPrice()
						.multiply(new BigDecimal(odb.getQuantity()))
						.subtract(costOfLine);

				// Add cost/profit to report
				totalCost = totalCost.add(costOfLine);
				totalProfit = totalProfit.add(profitOfLine);

				// Not sure if total sales is based on quantity of books or
				// number of orders **** ASK
				totalNumSales += odb.getQuantity();
			}
		}

		// Set the report variables
		report.setTotalNumSales(totalNumSales);
		report.setTotalCost(totalCost);
		report.setTotalProfit(totalProfit);
		report.setOrders(orders);

		return report;

	}

}

package g4w14.BookStore.actionbeans;

import g4w14.BookStore.beans.BookBean;
import g4w14.BookStore.beans.CustomerReviewBean;
import g4w14.BookStore.beans.UserBean;

import java.io.IOException;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The implementation class for Users table database queries.
 * 
 * @author Christopher Reid
 */

@Named("customerReviewAction")
@RequestScoped
public class CustomerReviewActionBean implements Serializable {

	private static final long serialVersionUID = 1551521561739117266L;
	private final Logger log = LoggerFactory.getLogger(this.getClass()
			.getName());

	@Inject
	UserBean ub;
	
	@Inject
	BookBean bb;
	
	// See the context.xml for the datasource
	@Resource(name = "jdbc/genres")
	private DataSource ds;

	/*
	 * Constructor with superclass
	 */
	public CustomerReviewActionBean() throws NullPointerException, IOException {
		super();
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/genres");
		} catch (NamingException e) {
			e.printStackTrace();
		}
		log.debug("CustomersDAOImpl instantiated");
	}

	/**
	 * Inserts a customer review into the CustomerReview table by using a
	 * CustomerReviewBean object.
	 * 
	 * @param crb
	 */
	public int insert(CustomerReviewBean crb) throws SQLException {

		String preparedSQL = "INSERT INTO customer_reviews("
				+ "book_id, user_id, invoice_id, name, rating, "
				+ "review, approval) VALUES(?,?,?,?,?,?,?);";
		int affected = 0;

		try (Connection connection = ds.getConnection();
				PreparedStatement ps = connection.prepareStatement(preparedSQL)) {

			ps.setLong(1, crb.getBookId());
			ps.setLong(2, crb.getUserId());
			ps.setLong(3, crb.getInvoiceId());
			ps.setString(4, crb.getName());
			ps.setInt(5, crb.getRating());
			ps.setString(6, crb.getReview());
			ps.setInt(7, crb.isApproval());

			affected = ps.executeUpdate();

		} catch (SQLException sqlex) {

			// Log the exception
			log.error("JDBC Connection Failed", sqlex);

			// Re-throw the exception
			throw sqlex;
		}

		// Log the number of affected rows in table
		log.debug("Number of rows affected [delete]=" + affected);

		// Return result
		return affected;
	}

	/**
	 * Updates a customer review from the Customer Review table that matches the
	 * id.
	 * 
	 * @param crb
	 */
	public int update(CustomerReviewBean crb) throws SQLException {
		String preparedSQL = "UPDATE customer_reviews SET "
				+ "book_id = ?, user_id= ?, invoice_id = ?, name= ?, "
				+ "review_date= ?, rating= ?, review= ?, approval= ? "
				+ "WHERE _id = ?";
		int affected = 0;

		try (Connection connection = ds.getConnection();
				PreparedStatement ps = connection.prepareStatement(preparedSQL)) {
			ps.setLong(1, crb.getBookId());
			ps.setLong(2, crb.getUserId());
			ps.setLong(3, crb.getInvoiceId());
			ps.setString(4, crb.getName());
			ps.setTimestamp(5, crb.getReviewDate());
			ps.setInt(6, crb.getRating());
			ps.setString(7, crb.getReview());
			ps.setInt(8, crb.isApproval());
			ps.setLong(9, crb.getId());

			affected = ps.executeUpdate();

		} catch (SQLException sqlex) {

			// Log the exception
			log.error("JDBC Connection Failed", sqlex);

			// Re-throw the exception
			throw sqlex;
		}

		// Log the number of affected rows in table
		log.debug("Number of rows affected [delete]=" + affected);

		// Return result
		return affected;
	}

	/**
	 * Deletes a customer review from the CustomerReviews table that matches the
	 * id.
	 * 
	 * @param crb
	 */
	public int remove(CustomerReviewBean crb) throws SQLException {

		String preparedSQL = "UPDATE customer_reviews SET "
				+ "approval= 0 WHERE _id = ?";
		int affected = 0;

		try (Connection connection = ds.getConnection();
				PreparedStatement ps = connection.prepareStatement(preparedSQL)) {

			ps.setLong(1, crb.getId());
			affected = ps.executeUpdate();

		} catch (SQLException sqlex) {

			// Log the exception
			log.error("JDBC Connection Failed", sqlex);

			// Re-throw the exception
			throw sqlex;
		}

		// Log the number of affected rows in table
		log.debug("Number of rows affected [delete]=" + affected);

		// Return result
		return affected;
	}

	
	public ArrayList<CustomerReviewBean> getCustomerReviewsById() throws SQLException {
		
		ArrayList<CustomerReviewBean> customerReviews = new ArrayList<CustomerReviewBean>();
		
		// Using Java 1.7 try with resources to create JDBC Connection
		try (Connection connection = ds.getConnection();
				PreparedStatement customerReviewPS = connection.prepareStatement(
						"SELECT * FROM customer_reviews WHERE book_id = ? ORDER BY review_date")) {
			
			customerReviewPS.setLong(1, bb.getId());
			
			try (ResultSet customerReviewRS = customerReviewPS.executeQuery()) {
				
				while(customerReviewRS.next()) {
					CustomerReviewBean crb = new CustomerReviewBean();
					crb.setId(customerReviewRS.getLong("_id"));
					crb.setBookId(customerReviewRS.getLong("book_id"));
					crb.setUserId(customerReviewRS.getLong("user_id"));
					crb.setInvoiceId(customerReviewRS.getLong("invoice_id"));
					crb.setName(customerReviewRS.getString("name"));
					crb.setReviewDate(customerReviewRS.getTimestamp("review_date"));
					crb.setRating(customerReviewRS.getInt("rating"));
					crb.setReview(customerReviewRS.getString("review"));
					crb.setApproval(customerReviewRS.getInt("approval"));
					
					customerReviews.add(crb);
					
				}
			} catch (SQLException sqlex) {
				// Log the exception
				log.error("Row retrieval failed", sqlex);
				// Re-throw the exception
				throw sqlex;
			}
			
		} catch (SQLException sqlex) {
			// Log the exception
			log.error("Connection failed", sqlex);
			// Re-throw the exception
			throw sqlex;
		}
		
		return customerReviews;
		
	}
	
	public boolean getAlreadyCommented() throws SQLException {
		
		// Using Java 1.7 try with resources to create JDBC Connection
		try (Connection connection = ds.getConnection();
				PreparedStatement customerReviewPS = connection.prepareStatement(
						"SELECT * FROM customer_reviews WHERE book_id = ? AND user_id = ?")) {
			
			customerReviewPS.setLong(1, bb.getId());
			customerReviewPS.setLong(2, ub.getId());
		
			try (ResultSet customerReviewRS = customerReviewPS.executeQuery()) {
				
				// If the there is a result set, the customer has commented
				if (customerReviewRS.next()) {
					return true;
				} else {
					return false;
				}
			} catch (SQLException sqlex) {
				// Log the exception
				log.error("Row retrieval failed", sqlex);
				// Re-throw the exception
				throw sqlex;
			}
			
		} catch (SQLException sqlex) {
			// Log the exception
			log.error("Connection failed", sqlex);
			// Re-throw the exception
			throw sqlex;
		}
	}
	
	
	
	
	
	
	
	
}

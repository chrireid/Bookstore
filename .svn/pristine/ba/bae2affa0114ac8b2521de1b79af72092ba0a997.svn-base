package g4w14.BookStore.actionbeans;

import g4w14.BookStore.beans.InvoiceBean; 

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import javax.annotation.Resource;
import javax.enterprise.context.RequestScoped;
import javax.inject.Named;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

//the implementation of the methods will go here eventually.

@Named("invoiceAction")
@RequestScoped
public class InvoiceActionBean implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 6912812658626617438L;
	private final Logger log = LoggerFactory.getLogger(this.getClass()
			.getName());
	private Properties properties = new Properties();
	private String url;
	private String user;
	private String password;

	// See the context.xml for the datasource
	@Resource(name = "jdbc/genres")
	private DataSource ds;

	/*
	 * Constructor with superclass
	 */
	public InvoiceActionBean() throws NullPointerException, IOException {
		super();
		loadProperties("db.properties");
		log.debug("CustomersDAOImpl instantiated");
	}

	/*
	 * This ha sonly an insert cause the bean we create, we display it right off
	 * and we send it via email. we do not do anythign else with it well, at
	 * least we do that in the corresponding code, not in the database stuff.
	 */

	public int insert(InvoiceBean ib) throws SQLException {
		// TODO Auto-generated method stub

		String preparedSQL = "INSERT INTO invoice (_id,user_id,total_value,"
				+ "pst,gst,hst,total_gross) VALUES(?,?,?,?,?,?,?);";
		int affected = 0;

		try (Connection connection = DriverManager.getConnection(url, user,
				password);
				PreparedStatement ps = connection.prepareStatement(preparedSQL)) {
			ps.setLong(1, ib.get_id());
			ps.setLong(2, ib.getClient_id());
			ps.setObject(3, ib.getTotal_value());
			ps.setObject(4, ib.getPst());
			ps.setObject(5, ib.getGst());
			ps.setObject(6, ib.getHst());
			ps.setObject(7, ib.getTotal_gross());
			// insert as objets, itll figure out the decimal datatype in the
			// databse on its own

			affected = ps.executeUpdate();
		} catch (SQLException sqlex) {

			// Log the exception
			log.error("JDBC Connection Failed", sqlex);

			// Re-throw the exception
			throw sqlex;
		}

		// Log the number of affected rows in table
		log.debug("Number of rows affected [insert]=" + affected);

		// Return result
		return affected;
	}

	private void loadProperties(String propertiesFileName) throws IOException,
			NullPointerException {

		// Throws NullPointerException if file is not found
		ClassLoader loader = Thread.currentThread().getContextClassLoader();
		InputStream stream = loader.getResourceAsStream(propertiesFileName);
		properties.load(stream);

		// Load the properties into variables for making connections
		url = properties.getProperty("url");
		user = properties.getProperty("user");
		password = properties.getProperty("password");

	}

	public InvoiceBean getInvoiceById(InvoiceBean ib) throws SQLException {
		// TODO Auto-generated method stub
		InvoiceBean invoice = null;

		// Build SQL string
		String preparedSQL = "SELECT * FROM invoice WHERE _id = ?";

		// Using Java 1.7 try with resources to create JDBC connection
		try (Connection connection = DriverManager.getConnection(url, user,
				password);
				PreparedStatement ps = connection.prepareStatement(preparedSQL)) {

			// Set the PreparedStatement parameters
			ps.setLong(1, ib.get_id());

			try (ResultSet resultSet = ps.executeQuery()) {

				while (resultSet.next()) {
					InvoiceBean bean = new InvoiceBean();
					bean.set_id(resultSet.getLong("_id"));
					bean.setSale_num(resultSet.getLong("sale_num"));
					bean.setSale_date(resultSet.getTimestamp("sale_date"));
					bean.setClient_id(resultSet.getLong("client_id"));
					bean.setTotal_value(resultSet.getBigDecimal("total_value"));
					bean.setPst(resultSet.getBigDecimal("pst"));
					bean.setGst(resultSet.getBigDecimal("gst"));
					bean.setHst(resultSet.getBigDecimal("hst"));
					bean.setTotal_gross(resultSet.getBigDecimal("total_gross"));

					invoice = bean;
				}
			} catch (SQLException sqlex) {

				// Log the exception
				log.error("ResultSet failed", sqlex);

				// Re-throw the exception
				throw sqlex;
			}

		} catch (SQLException sqlex) {

			// Log the exception
			log.error("JDBC Connection failed", sqlex);

			// Re-throw the exception
			throw sqlex;
		}

		log.debug("Invoice parameters for search by id=" + invoice.toString());
		return invoice;

	}

	public InvoiceBean getInvoiceBySaleNum(InvoiceBean ib) throws SQLException {
		// TODO Auto-generated method stub
		InvoiceBean invoice = null;

		// Build SQL string
		String preparedSQL = "SELECT * FROM invoice WHERE sale_num = ?";

		// Using Java 1.7 try with resources to create JDBC connection
		try (Connection connection = DriverManager.getConnection(url, user,
				password);
				PreparedStatement ps = connection.prepareStatement(preparedSQL)) {

			// Set the PreparedStatement parameters
			ps.setLong(1, ib.getSale_num());

			try (ResultSet resultSet = ps.executeQuery()) {

				while (resultSet.next()) {
					InvoiceBean bean = new InvoiceBean();
					bean.set_id(resultSet.getLong("_id"));
					bean.setSale_num(resultSet.getLong("sale_num"));
					bean.setSale_date(resultSet.getTimestamp("sale_date"));
					bean.setClient_id(resultSet.getLong("client_id"));
					bean.setTotal_value(resultSet.getBigDecimal("total_value"));
					bean.setPst(resultSet.getBigDecimal("pst"));
					bean.setGst(resultSet.getBigDecimal("gst"));
					bean.setHst(resultSet.getBigDecimal("hst"));
					bean.setTotal_gross(resultSet.getBigDecimal("total_gross"));

					invoice = bean;
				}
			} catch (SQLException sqlex) {

				// Log the exception
				log.error("ResultSet failed", sqlex);

				// Re-throw the exception
				throw sqlex;
			}

		} catch (SQLException sqlex) {

			// Log the exception
			log.error("JDBC Connection failed", sqlex);

			// Re-throw the exception
			throw sqlex;
		}

		log.debug("Invoice parameters for search by sale_num="
				+ invoice.toString());
		return invoice;

	}

}
